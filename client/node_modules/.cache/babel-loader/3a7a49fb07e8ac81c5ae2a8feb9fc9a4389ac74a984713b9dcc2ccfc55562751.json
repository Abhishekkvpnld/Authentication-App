{"ast":null,"code":"import toast from \"react-hot-toast\";\n\n/**Username validation */\n\nexport async function usernameValidate(values) {\n  const error = usernameVerify({}, values);\n  return error;\n}\nfunction usernameVerify(errors = {}, values) {\n  if (!values.username) {\n    errors.username = toast.error(\"Username Required...!\");\n  } else if (!values.username.trim()) {\n    errors.username = toast.error(\"Invalid Username...!\");\n  } else if (values.username.length < 4) {\n    errors.username = toast.error(\"Username must be more than 3 characters long\");\n  }\n  return errors;\n}\n\n/** Password validation */\n\nexport async function passwordValidate(values) {\n  const error = passwordVerify({}, values);\n  return error;\n}\nfunction passwordVerify(errors = {}, values) {\n  const specialCharacters = /[ `!@#$%^&?|*()-_=+[]{};:'\",<.>\\/]/;\n  if (!values.password) {\n    errors.password = toast.error(\"Password Required....!\");\n  } else if (!values.password.trim()) {\n    errors.password = toast.error(\"Wrong Password...!\");\n  } else if (values.password.length < 4) {\n    errors.password = toast.error(\"Password Must be more than 4 characters long\");\n  } else if (!specialCharacters.test(values.password)) {\n    errors.password = toast.error(\"Password must have special characters\");\n  }\n  return errors;\n}\n\n/*******Reset password validate */\nexport async function resetPasswordValidation(values) {\n  const errors = passwordVerify({}, values);\n  if (values.password !== values.confirm_password) {\n    errors.exit = toast.error(\"Password not match...!\");\n    return;\n  }\n}","map":{"version":3,"names":["toast","usernameValidate","values","error","usernameVerify","errors","username","trim","length","passwordValidate","passwordVerify","specialCharacters","password","test","resetPasswordValidation","confirm_password","exit"],"sources":["C:/Users/JISHN/Documents/projects/Authentication app/client/src/helper/Validate.jsx"],"sourcesContent":["import toast from \"react-hot-toast\";\r\n\r\n\r\n/**Username validation */\r\n\r\nexport async function usernameValidate(values){\r\n    const error = usernameVerify({},values)\r\n    return error;\r\n}\r\n\r\nfunction usernameVerify(errors = {}, values) {\r\n    if (!values.username) {\r\n      errors.username = toast.error(\"Username Required...!\");\r\n    } else if (!values.username.trim()) {\r\n      errors.username = toast.error(\"Invalid Username...!\");\r\n    } else if (values.username.length < 4) {\r\n      errors.username = toast.error(\"Username must be more than 3 characters long\");\r\n    }\r\n  \r\n    return errors;\r\n  }\r\n  \r\n/** Password validation */\r\n\r\nexport async function passwordValidate (values){\r\n    const error = passwordVerify({},values)\r\n    return error\r\n}\r\n\r\nfunction passwordVerify(errors = {}, values) {\r\n    const specialCharacters = /[ `!@#$%^&?|*()-_=+[]{};:'\",<.>\\/]/;\r\n  \r\n    if (!values.password) {\r\n      errors.password = toast.error(\"Password Required....!\");\r\n    } else if (!values.password.trim()) {\r\n      errors.password = toast.error(\"Wrong Password...!\");\r\n    } else if (values.password.length < 4) {\r\n      errors.password = toast.error(\"Password Must be more than 4 characters long\");\r\n    } else if (!specialCharacters.test(values.password)) {\r\n      errors.password = toast.error(\"Password must have special characters\");\r\n    }\r\n\r\n    return errors;\r\n  }\r\n  \r\n  /*******Reset password validate */\r\n  export async function resetPasswordValidation(values){\r\nconst errors = passwordVerify({},values)\r\nif(values.password !== values.confirm_password){\r\nerrors.exit = toast.error(\"Password not match...!\");\r\nreturn \r\n}\r\n  }"],"mappings":"AAAA,OAAOA,KAAK,MAAM,iBAAiB;;AAGnC;;AAEA,OAAO,eAAeC,gBAAgBA,CAACC,MAAM,EAAC;EAC1C,MAAMC,KAAK,GAAGC,cAAc,CAAC,CAAC,CAAC,EAACF,MAAM,CAAC;EACvC,OAAOC,KAAK;AAChB;AAEA,SAASC,cAAcA,CAACC,MAAM,GAAG,CAAC,CAAC,EAAEH,MAAM,EAAE;EACzC,IAAI,CAACA,MAAM,CAACI,QAAQ,EAAE;IACpBD,MAAM,CAACC,QAAQ,GAAGN,KAAK,CAACG,KAAK,CAAC,uBAAuB,CAAC;EACxD,CAAC,MAAM,IAAI,CAACD,MAAM,CAACI,QAAQ,CAACC,IAAI,CAAC,CAAC,EAAE;IAClCF,MAAM,CAACC,QAAQ,GAAGN,KAAK,CAACG,KAAK,CAAC,sBAAsB,CAAC;EACvD,CAAC,MAAM,IAAID,MAAM,CAACI,QAAQ,CAACE,MAAM,GAAG,CAAC,EAAE;IACrCH,MAAM,CAACC,QAAQ,GAAGN,KAAK,CAACG,KAAK,CAAC,8CAA8C,CAAC;EAC/E;EAEA,OAAOE,MAAM;AACf;;AAEF;;AAEA,OAAO,eAAeI,gBAAgBA,CAAEP,MAAM,EAAC;EAC3C,MAAMC,KAAK,GAAGO,cAAc,CAAC,CAAC,CAAC,EAACR,MAAM,CAAC;EACvC,OAAOC,KAAK;AAChB;AAEA,SAASO,cAAcA,CAACL,MAAM,GAAG,CAAC,CAAC,EAAEH,MAAM,EAAE;EACzC,MAAMS,iBAAiB,GAAG,oCAAoC;EAE9D,IAAI,CAACT,MAAM,CAACU,QAAQ,EAAE;IACpBP,MAAM,CAACO,QAAQ,GAAGZ,KAAK,CAACG,KAAK,CAAC,wBAAwB,CAAC;EACzD,CAAC,MAAM,IAAI,CAACD,MAAM,CAACU,QAAQ,CAACL,IAAI,CAAC,CAAC,EAAE;IAClCF,MAAM,CAACO,QAAQ,GAAGZ,KAAK,CAACG,KAAK,CAAC,oBAAoB,CAAC;EACrD,CAAC,MAAM,IAAID,MAAM,CAACU,QAAQ,CAACJ,MAAM,GAAG,CAAC,EAAE;IACrCH,MAAM,CAACO,QAAQ,GAAGZ,KAAK,CAACG,KAAK,CAAC,8CAA8C,CAAC;EAC/E,CAAC,MAAM,IAAI,CAACQ,iBAAiB,CAACE,IAAI,CAACX,MAAM,CAACU,QAAQ,CAAC,EAAE;IACnDP,MAAM,CAACO,QAAQ,GAAGZ,KAAK,CAACG,KAAK,CAAC,uCAAuC,CAAC;EACxE;EAEA,OAAOE,MAAM;AACf;;AAEA;AACA,OAAO,eAAeS,uBAAuBA,CAACZ,MAAM,EAAC;EACvD,MAAMG,MAAM,GAAGK,cAAc,CAAC,CAAC,CAAC,EAACR,MAAM,CAAC;EACxC,IAAGA,MAAM,CAACU,QAAQ,KAAKV,MAAM,CAACa,gBAAgB,EAAC;IAC/CV,MAAM,CAACW,IAAI,GAAGhB,KAAK,CAACG,KAAK,CAAC,wBAAwB,CAAC;IACnD;EACA;AACE"},"metadata":{},"sourceType":"module","externalDependencies":[]}