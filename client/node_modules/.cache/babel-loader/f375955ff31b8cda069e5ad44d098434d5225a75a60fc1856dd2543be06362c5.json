{"ast":null,"code":"import axios from \"axios\";\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_DOMAIN;\n\n/**Make api Requests */\n\n/**To get user name from Token */\nexport async function getUsername() {\n  const token = localStorage.se;\n}\n\n/**Authenticate function */\nexport async function authenticate(username) {\n  try {\n    return await axios.post('/api/authenticate', {\n      username\n    });\n  } catch (error) {\n    return {\n      error: \"Username doesn't exist...!\"\n    };\n  }\n}\n\n/**get user details */\nexport async function getUser({\n  username\n}) {\n  try {\n    const {\n      data\n    } = await axios.get(`/api/user/${username}`);\n    return {\n      data\n    };\n  } catch (error) {\n    return {\n      error: \"Password doesn't match...!\"\n    };\n  }\n}\n\n/**register user function */\nexport async function registerUser(credential) {\n  try {\n    const {\n      data: {\n        msg\n      },\n      status\n    } = await axios.post(`/api/register`, credential);\n    let {\n      username,\n      email\n    } = credential;\n\n    /**send email */\n    if (status === 201) {\n      await axios.post('/api/registerMail', {\n        username,\n        userEmail: email,\n        text: msg\n      });\n    }\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}\n\n/**Login function */\nexport async function verifyPassword({\n  username,\n  password\n}) {\n  try {\n    if (username) {\n      const {\n        data\n      } = await axios.post('/api/login', {\n        username,\n        password\n      });\n      return Promise.resolve({\n        data\n      });\n    }\n  } catch (error) {\n    return Promise.reject({\n      error: \"Password doesn't Match...!\"\n    });\n  }\n}\n\n/**update user profile function */\nexport async function updateUser(response) {\n  try {\n    const token = await localStorage.getItem('token');\n    const data = await axios.put('/api/updateUser', response, {\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    });\n    return Promise.resolve({\n      data\n    });\n  } catch (error) {\n    return Promise.reject({\n      error: \"Couldn't update Profile...!\"\n    });\n  }\n}\n\n/**generate OTP */\nexport async function generateOTP(username) {\n  try {\n    const {\n      data: {\n        code\n      },\n      status\n    } = await axios.get('/api/generateOTP', {\n      params: {\n        username\n      }\n    });\n\n    /**send mail with OTP */\n    if (status === 201) {\n      let {\n        data: {\n          email\n        }\n      } = await getUser({\n        username\n      });\n      let text = `Your password Recovery OTP is ${code}.Verify and recover your password.`;\n      await axios.post('/api/registerMail', {\n        username,\n        userEmail: email,\n        text,\n        subject: \"Password Recovery OTP\"\n      });\n    }\n    return Promise.resolve(code);\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}\n\n/**verify OTP */\nexport async function verifyOTP({\n  username,\n  code\n}) {\n  try {\n    const {\n      data,\n      status\n    } = await axios.get('/api/verifyOTP', {\n      params: {\n        username,\n        code\n      }\n    });\n    return {\n      data,\n      status\n    };\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\n\n/**reset password */\nexport async function resetPassword({\n  username,\n  password\n}) {\n  try {\n    const {\n      data,\n      status\n    } = await axios.put('/api/resetPassword', {\n      username,\n      password\n    });\n    return Promise.resolve({\n      data,\n      status\n    });\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}","map":{"version":3,"names":["axios","defaults","baseURL","process","env","REACT_APP_SERVER_DOMAIN","getUsername","token","localStorage","se","authenticate","username","post","error","getUser","data","get","registerUser","credential","msg","status","email","userEmail","text","Promise","reject","verifyPassword","password","resolve","updateUser","response","getItem","put","headers","generateOTP","code","params","subject","verifyOTP","resetPassword"],"sources":["C:/Users/JISHN/Documents/projects/Authentication app/client/src/helper/helper.jsx"],"sourcesContent":["import axios from \"axios\";\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_DOMAIN\r\n\r\n/**Make api Requests */\r\n\r\n\r\n/**To get user name from Token */\r\nexport async function getUsername(){\r\n    const token = localStorage.se\r\n}\r\n\r\n/**Authenticate function */\r\nexport async function authenticate(username) {\r\n    try {\r\n        return await axios.post('/api/authenticate', { username })\r\n    } catch (error) {\r\n        return { error: \"Username doesn't exist...!\" }\r\n    }\r\n}\r\n\r\n/**get user details */\r\nexport async function getUser({ username }) {\r\n    try {\r\n        const { data } = await axios.get(`/api/user/${username}`)\r\n        return { data }\r\n    } catch (error) {\r\n        return { error: \"Password doesn't match...!\" }\r\n    }\r\n}\r\n\r\n/**register user function */\r\nexport async function registerUser(credential) {\r\n    try {\r\n\r\n        const { data: { msg }, status } = await axios.post(`/api/register`, credential)\r\n\r\n        let { username, email } = credential;\r\n\r\n        /**send email */\r\n        if (status === 201) {\r\n            await axios.post('/api/registerMail', { username, userEmail:email, text:msg })\r\n        }\r\n\r\n    } catch (error) {\r\n        return Promise.reject({ error })\r\n    }\r\n}\r\n\r\n/**Login function */\r\nexport async function verifyPassword({ username, password }) {\r\n    try {\r\n        if (username) {\r\n            const { data } = await axios.post('/api/login', { username, password })\r\n            return Promise.resolve({ data });\r\n        }\r\n    } catch (error) {\r\n        return Promise.reject({ error: \"Password doesn't Match...!\" })\r\n    }\r\n}\r\n\r\n/**update user profile function */\r\nexport async function updateUser(response) {\r\n    try {\r\n        const token = await localStorage.getItem('token')\r\n        const data = await axios.put('/api/updateUser', response, { headers: { \"Authorization\": `Bearer ${token}` } })\r\n\r\n        return Promise.resolve({ data })\r\n\r\n    } catch (error) {\r\n        return Promise.reject({ error: \"Couldn't update Profile...!\" })\r\n    }\r\n}\r\n\r\n/**generate OTP */\r\nexport async function generateOTP(username) {\r\n    try {\r\n\r\n        const { data: { code }, status } = await axios.get('/api/generateOTP', { params: { username } })\r\n\r\n        /**send mail with OTP */\r\n        if (status === 201) {\r\n            let { data: { email } } = await getUser({ username });\r\n            let text = `Your password Recovery OTP is ${code}.Verify and recover your password.`;\r\n            await axios.post('/api/registerMail', { username, userEmail: email, text, subject: \"Password Recovery OTP\" })\r\n        }\r\n\r\n        return Promise.resolve(code);\r\n\r\n    } catch (error) {\r\n        return Promise.reject({ error })\r\n    }\r\n}\r\n\r\n/**verify OTP */\r\nexport async function verifyOTP({ username, code }) {\r\n    try {\r\n        const { data, status } = await axios.get('/api/verifyOTP', { params: { username, code } })\r\n        return { data, status }\r\n    } catch (error) {\r\n        return Promise.reject(error)\r\n    }\r\n}\r\n\r\n/**reset password */\r\nexport async function resetPassword({ username, password }) {\r\n    try {\r\n        const { data, status } = await axios.put('/api/resetPassword', { username, password });\r\n        return Promise.resolve({ data, status })\r\n    } catch (error) {\r\n        return Promise.reject({ error })\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}