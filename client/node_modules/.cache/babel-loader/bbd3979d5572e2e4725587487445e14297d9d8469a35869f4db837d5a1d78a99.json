{"ast":null,"code":"import axios from \"axios\";\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_DOMAIN;\n\n/**Make api Requests */\n\n/**Authenticate function */\nexport async function authenticate(username) {\n  try {\n    return await axios.post('/api/authenticate', {\n      username\n    });\n  } catch (error) {\n    return {\n      error: \"Username doesn't exist...!\"\n    };\n  }\n}\n\n/**get user details */\nexport async function getUser({\n  username\n}) {\n  try {\n    const {\n      data\n    } = await axios.get(`/api/user/${username}`);\n    return {\n      data\n    };\n  } catch (error) {\n    return {\n      error: \"Password doesn't match...!\"\n    };\n  }\n}\n\n/**register user function */\nexport async function registerUser(credential) {\n  try {\n    const response = await axios.post('/api/register', credential);\n    if (response.status === 201) {\n      const {\n        username,\n        email\n      } = credential;\n\n      // Send email\n      await axios.post('/api/registerMail', {\n        username,\n        userEmail: email,\n        text: response.data.msg\n      });\n\n      // Indicate success or provide additional information if needed\n      return Promise.resolve({\n        success: true\n      });\n    } else {\n      // Handle unexpected status codes\n      return Promise.reject({\n        error: `Unexpected status code: ${response.status}`\n      });\n    }\n  } catch (error) {\n    // Handle network or other errors\n    return Promise.reject({\n      error\n    });\n  }\n}\n\n/**Login function */\nexport async function verifyPassword({\n  username,\n  password\n}) {\n  try {\n    if (username) {\n      const {\n        data\n      } = await axios.post('/api/login', {\n        username,\n        password\n      });\n      return Promise.resolve({\n        data\n      });\n    }\n  } catch (error) {\n    return Promise.reject({\n      error: \"Password doesn't Match...!\"\n    });\n  }\n}\n\n/**update user profile function */\nexport async function updateUser(response) {\n  try {\n    const token = await localStorage.getItem('token');\n    const data = await axios.put('/api/updateUser', response, {\n      headers: {\n        \"Authorization\": `Bearer ${token}`\n      }\n    });\n    return Promise.resolve({\n      data\n    });\n  } catch (error) {\n    return Promise.reject({\n      error: \"Couldn't update Profile...!\"\n    });\n  }\n}\n\n/**generate OTP */\nexport async function generateOTP(username) {\n  try {\n    const {\n      data: {\n        code\n      },\n      status\n    } = await axios.get('/api/generateOTP', {\n      params: {\n        username\n      }\n    });\n\n    /**send mail with OTP */\n    if (status === 201) {\n      let {\n        data: {\n          email\n        }\n      } = await getUser({\n        username\n      });\n      let text = `Your password Recovery OTP is ${code}.Verify and recover your password.`;\n      await axios.post('/api/registerMail', {\n        username,\n        userEmail: email,\n        text,\n        subject: \"Password Recovery OTP\"\n      });\n    }\n    return Promise.resolve(code);\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}\n\n/**verify OTP */\nexport async function verifyOTP({\n  username,\n  code\n}) {\n  try {\n    const {\n      data,\n      status\n    } = await axios.get('/api/verifyOTP', {\n      params: {\n        username,\n        code\n      }\n    });\n    return {\n      data,\n      status\n    };\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\n\n/**reset password */\nexport async function resetPassword({\n  username,\n  password\n}) {\n  try {\n    const {\n      data,\n      status\n    } = await axios.put('/api/resetPassword', {\n      username,\n      password\n    });\n    return Promise.resolve({\n      data,\n      status\n    });\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}","map":{"version":3,"names":["axios","defaults","baseURL","process","env","REACT_APP_SERVER_DOMAIN","authenticate","username","post","error","getUser","data","get","registerUser","credential","response","status","email","userEmail","text","msg","Promise","resolve","success","reject","verifyPassword","password","updateUser","token","localStorage","getItem","put","headers","generateOTP","code","params","subject","verifyOTP","resetPassword"],"sources":["C:/Users/JISHN/Documents/projects/Authentication app/client/src/helper/helper.jsx"],"sourcesContent":["import axios from \"axios\";\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_DOMAIN\r\n\r\n/**Make api Requests */\r\n\r\n\r\n/**Authenticate function */\r\nexport async function authenticate(username){\r\ntry{\r\nreturn await axios.post('/api/authenticate',{username})\r\n}catch(error){\r\n    return {error:\"Username doesn't exist...!\"}\r\n}\r\n}\r\n\r\n/**get user details */\r\nexport async function getUser({username}){\r\n    try{\r\nconst {data} = await axios.get(`/api/user/${username}`)\r\nreturn {data}\r\n    }catch(error){\r\n        return {error:\"Password doesn't match...!\"}\r\n    }\r\n}\r\n\r\n/**register user function */\r\nexport async function registerUser(credential) {\r\n    try {\r\n        const response = await axios.post('/api/register', credential);\r\n\r\n        if (response.status === 201) {\r\n            const { username, email } = credential;\r\n\r\n            // Send email\r\n            await axios.post('/api/registerMail', { username, userEmail: email, text: response.data.msg });\r\n\r\n            // Indicate success or provide additional information if needed\r\n            return Promise.resolve({ success: true });\r\n        } else {\r\n            // Handle unexpected status codes\r\n            return Promise.reject({ error: `Unexpected status code: ${response.status}` });\r\n        }\r\n    } catch (error) {\r\n        // Handle network or other errors\r\n        return Promise.reject({ error });\r\n    }\r\n}\r\n\r\n/**Login function */\r\nexport async function verifyPassword({username,password}){\r\ntry{\r\nif(username){\r\n    const {data} = await axios.post('/api/login',{username,password})\r\n    return Promise.resolve({data});\r\n}\r\n}catch(error){\r\n    return Promise.reject({error:\"Password doesn't Match...!\"})\r\n}\r\n}\r\n\r\n/**update user profile function */\r\nexport async function updateUser(response){\r\n    try{\r\nconst token = await localStorage.getItem('token')\r\nconst data = await axios.put('/api/updateUser',response,{headers:{\"Authorization\":`Bearer ${token}`}})\r\n\r\nreturn Promise.resolve({data})\r\n\r\n    }catch(error){\r\n        return Promise.reject({error:\"Couldn't update Profile...!\"})\r\n    }\r\n}\r\n\r\n/**generate OTP */\r\nexport async function generateOTP(username){\r\n    try{\r\n\r\n        const {data:{code},status} = await axios.get('/api/generateOTP',{params:{username}})\r\n\r\n        /**send mail with OTP */\r\n        if(status === 201){\r\n            let {data:{email}} = await getUser({username});\r\n            let text = `Your password Recovery OTP is ${code}.Verify and recover your password.`;\r\n            await axios.post('/api/registerMail',{username,userEmail:email,text,subject:\"Password Recovery OTP\"})\r\n        }\r\n\r\n        return Promise.resolve(code);\r\n\r\n    }catch(error){\r\nreturn Promise.reject({error})\r\n    }\r\n}\r\n\r\n/**verify OTP */\r\nexport async function verifyOTP({username,code}){\r\n    try{\r\nconst {data,status} = await axios.get('/api/verifyOTP',{params:{username,code}})\r\nreturn {data,status}\r\n    }catch(error){\r\n        return Promise.reject(error)\r\n    }\r\n}\r\n\r\n/**reset password */\r\nexport async function resetPassword({username,password}){\r\n    try{\r\nconst {data,status} = await axios.put('/api/resetPassword',{username,password});\r\nreturn Promise.resolve({data,status})\r\n    }catch(error){\r\n        return Promise.reject({error})\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}