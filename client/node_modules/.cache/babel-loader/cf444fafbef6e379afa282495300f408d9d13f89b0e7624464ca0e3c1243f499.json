{"ast":null,"code":"import toast from \"react-hot-toast\";\n\n/**Username validation */\n\nexport async function usernameValidate(values) {\n  const error = usernameVerify({}, values);\n  return error;\n}\nfunction usernameVerify(error = {}, values) {\n  if (!values.username) {\n    error.username = toast.error(\"Username Required...!\");\n  } else if (!values.username.trim()) {\n    error.username = toast.error(\"Invalid Username...!\");\n  } else if (v) return error;\n}\n\n/** Password validation */\n\nexport async function passwordValidate(values) {\n  const error = passwordVerify({}, values);\n  return error;\n}\nfunction passwordVerify(errors = {}, values) {\n  const specialCharacters = /[ `!@#$%^&*()-_=+[{]};:'\",<.>\\/?\\\\|]/;\n  if (!values.password) {\n    errors.password = toast.error(\"Password Required....!\");\n  } else if (!values.password.trim()) {\n    errors.password = toast.error(\"Wrong Password...!\");\n  } else if (values.password.length < 4) {\n    errors.password = toast.error(\"Password Must be more than 4 characters long\");\n  } else if (!specialCharacters.test(values.password)) {\n    errors.password = toast.error(\"Password must have special characters\");\n  }\n  return errors;\n}","map":{"version":3,"names":["toast","usernameValidate","values","error","usernameVerify","username","trim","v","passwordValidate","passwordVerify","errors","specialCharacters","password","length","test"],"sources":["C:/Users/JISHN/Documents/projects/Authentication app/client/src/helper/Validate.jsx"],"sourcesContent":["import toast from \"react-hot-toast\";\r\n\r\n\r\n/**Username validation */\r\n\r\nexport async function usernameValidate(values){\r\n    const error = usernameVerify({},values)\r\n    return error;\r\n}\r\n\r\nfunction usernameVerify (error={},values){\r\n    if(!values.username){\r\n        error.username = toast.error(\"Username Required...!\")\r\n    }else if(!values.username.trim()) {\r\n        error.username = toast.error(\"Invalid Username...!\")\r\n    }else if (v)\r\n    return error\r\n}\r\n\r\n/** Password validation */\r\n\r\nexport async function passwordValidate (values){\r\n    const error = passwordVerify({},values)\r\n    return error\r\n}\r\n\r\nfunction passwordVerify(errors = {}, values) {\r\n    const specialCharacters = /[ `!@#$%^&*()-_=+[{]};:'\",<.>\\/?\\\\|]/;\r\n  \r\n    if (!values.password) {\r\n      errors.password = toast.error(\"Password Required....!\");\r\n    } else if (!values.password.trim()) {\r\n      errors.password = toast.error(\"Wrong Password...!\");\r\n    } else if (values.password.length < 4) {\r\n      errors.password = toast.error(\"Password Must be more than 4 characters long\");\r\n    } else if (!specialCharacters.test(values.password)) {\r\n      errors.password = toast.error(\"Password must have special characters\");\r\n    }\r\n  \r\n    return errors;\r\n  }\r\n  "],"mappings":"AAAA,OAAOA,KAAK,MAAM,iBAAiB;;AAGnC;;AAEA,OAAO,eAAeC,gBAAgBA,CAACC,MAAM,EAAC;EAC1C,MAAMC,KAAK,GAAGC,cAAc,CAAC,CAAC,CAAC,EAACF,MAAM,CAAC;EACvC,OAAOC,KAAK;AAChB;AAEA,SAASC,cAAcA,CAAED,KAAK,GAAC,CAAC,CAAC,EAACD,MAAM,EAAC;EACrC,IAAG,CAACA,MAAM,CAACG,QAAQ,EAAC;IAChBF,KAAK,CAACE,QAAQ,GAAGL,KAAK,CAACG,KAAK,CAAC,uBAAuB,CAAC;EACzD,CAAC,MAAK,IAAG,CAACD,MAAM,CAACG,QAAQ,CAACC,IAAI,CAAC,CAAC,EAAE;IAC9BH,KAAK,CAACE,QAAQ,GAAGL,KAAK,CAACG,KAAK,CAAC,sBAAsB,CAAC;EACxD,CAAC,MAAK,IAAII,CAAC,EACX,OAAOJ,KAAK;AAChB;;AAEA;;AAEA,OAAO,eAAeK,gBAAgBA,CAAEN,MAAM,EAAC;EAC3C,MAAMC,KAAK,GAAGM,cAAc,CAAC,CAAC,CAAC,EAACP,MAAM,CAAC;EACvC,OAAOC,KAAK;AAChB;AAEA,SAASM,cAAcA,CAACC,MAAM,GAAG,CAAC,CAAC,EAAER,MAAM,EAAE;EACzC,MAAMS,iBAAiB,GAAG,sCAAsC;EAEhE,IAAI,CAACT,MAAM,CAACU,QAAQ,EAAE;IACpBF,MAAM,CAACE,QAAQ,GAAGZ,KAAK,CAACG,KAAK,CAAC,wBAAwB,CAAC;EACzD,CAAC,MAAM,IAAI,CAACD,MAAM,CAACU,QAAQ,CAACN,IAAI,CAAC,CAAC,EAAE;IAClCI,MAAM,CAACE,QAAQ,GAAGZ,KAAK,CAACG,KAAK,CAAC,oBAAoB,CAAC;EACrD,CAAC,MAAM,IAAID,MAAM,CAACU,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;IACrCH,MAAM,CAACE,QAAQ,GAAGZ,KAAK,CAACG,KAAK,CAAC,8CAA8C,CAAC;EAC/E,CAAC,MAAM,IAAI,CAACQ,iBAAiB,CAACG,IAAI,CAACZ,MAAM,CAACU,QAAQ,CAAC,EAAE;IACnDF,MAAM,CAACE,QAAQ,GAAGZ,KAAK,CAACG,KAAK,CAAC,uCAAuC,CAAC;EACxE;EAEA,OAAOO,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}