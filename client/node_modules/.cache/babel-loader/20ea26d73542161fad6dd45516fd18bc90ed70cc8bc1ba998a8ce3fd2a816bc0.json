{"ast":null,"code":"import toast from \"react-hot-toast\";\nimport { authenticate } from \"./helper\";\n\n/**Username validation */\n\nexport async function usernameValidate(values) {\n  const error = usernameVerify({}, values);\n  if (values.username) {\n    //check user exist or not\n    const {\n      status\n    } = await authenticate(values.username);\n    if (status !== 200) {\n      error.exist = toast.error(\"User doesn't exist...!\");\n    }\n  }\n  return error;\n}\nfunction usernameVerify(errors = {}, values) {\n  if (!values.username) {\n    errors.username = toast.error(\"Username Required...!\");\n  } else if (!values.username.trim()) {\n    errors.username = toast.error(\"Invalid Username...!\");\n  } else if (values.username.length < 4) {\n    errors.username = toast.error(\"Username must be more than 3 characters long\");\n  }\n  return errors;\n}\n\n/** Password validation */\n\nexport async function passwordValidate(values) {\n  const error = passwordVerify({}, values);\n  return error;\n}\nfunction passwordVerify(errors = {}, values) {\n  const specialCharacters = /[ `!@#$%^&?|*()-_=+[]{};:'\",<.>\\/]/;\n  if (!values.password) {\n    errors.password = toast.error(\"Password Required....!\");\n  } else if (!values.password.trim()) {\n    errors.password = toast.error(\"Wrong Password...!\");\n  } else if (values.password.length < 4) {\n    errors.password = toast.error(\"Password Must be more than 4 characters long\");\n  } else if (specialCharacters.test(values.password)) {\n    errors.password = toast.error(\"Password must have special characters\");\n  }\n  return errors;\n}\n\n/*******Reset password validate */\nexport async function resetPasswordValidation(values) {\n  const errors = passwordVerify({}, values);\n  if (values.password !== values.confirm_password) {\n    errors.exit = toast.error(\"Password not match...!\");\n    return errors;\n  }\n}\n\n/***Validate register form */\n\nexport async function registerValidation(values) {\n  const error = usernameVerify({}, values);\n  passwordVerify(error, values);\n  emailVerify(error, values);\n  return error;\n}\n\n/***Email Validation */\nfunction emailVerify(error = {}, values) {\n  if (!values.email) {\n    error.email = toast.error(\"Email Required...!\");\n  } else if (!values.email.trim()) {\n    error.email = toast.error(\"Wrong Email...!\");\n  } else if (!/^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/.test(values.email)) {\n    error.email = toast.error(\"Invalid Email Address\");\n  }\n  return error;\n}\n\n/**valida */","map":{"version":3,"names":["toast","authenticate","usernameValidate","values","error","usernameVerify","username","status","exist","errors","trim","length","passwordValidate","passwordVerify","specialCharacters","password","test","resetPasswordValidation","confirm_password","exit","registerValidation","emailVerify","email"],"sources":["C:/Users/JISHN/Documents/projects/Authentication app/client/src/helper/Validate.jsx"],"sourcesContent":["import toast from \"react-hot-toast\";\r\nimport { authenticate } from \"./helper\";\r\n\r\n/**Username validation */\r\n\r\nexport async function usernameValidate(values){\r\n    const error = usernameVerify({},values)\r\n    if(values.username){\r\n      //check user exist or not\r\n      const {status} = await authenticate(values.username);\r\n\r\n      if(status !== 200){\r\n        error.exist = toast.error(\"User doesn't exist...!\")\r\n      }\r\n    }\r\n    return error;\r\n}\r\n\r\nfunction usernameVerify(errors = {}, values) {\r\n    if (!values.username) {\r\n      errors.username = toast.error(\"Username Required...!\");\r\n    } else if (!values.username.trim()) {\r\n      errors.username = toast.error(\"Invalid Username...!\");\r\n    } else if (values.username.length < 4) {\r\n      errors.username = toast.error(\"Username must be more than 3 characters long\");\r\n    }\r\n  \r\n    return errors;\r\n  }\r\n  \r\n/** Password validation */\r\n\r\nexport async function passwordValidate (values){\r\n    const error = passwordVerify({},values)\r\n    return error\r\n}\r\n\r\nfunction passwordVerify(errors = {}, values) {\r\n    const specialCharacters = /[ `!@#$%^&?|*()-_=+[]{};:'\",<.>\\/]/;\r\n  \r\n    if (!values.password) {\r\n      errors.password = toast.error(\"Password Required....!\");\r\n    } else if (!values.password.trim()) {\r\n      errors.password = toast.error(\"Wrong Password...!\");\r\n    } else if (values.password.length < 4) {\r\n      errors.password = toast.error(\"Password Must be more than 4 characters long\");\r\n    } \r\n    else if (specialCharacters.test(values.password)) {\r\n      errors.password = toast.error(\"Password must have special characters\");\r\n    }\r\n\r\n    return errors;\r\n  }\r\n  \r\n  /*******Reset password validate */\r\n  export async function resetPasswordValidation(values){\r\nconst errors = passwordVerify({},values)\r\nif(values.password !== values.confirm_password){\r\nerrors.exit = toast.error(\"Password not match...!\");\r\nreturn errors;\r\n}\r\n  }\r\n\r\n  /***Validate register form */\r\n\r\n  export async function registerValidation(values){\r\nconst error = usernameVerify({},values);\r\npasswordVerify(error,values)\r\nemailVerify(error,values)\r\nreturn error\r\n  }\r\n\r\n  /***Email Validation */\r\n  function emailVerify (error={},values){\r\nif(!values.email){\r\n  error.email = toast.error(\"Email Required...!\")\r\n}else if(!values.email.trim()){\r\nerror.email = toast.error(\"Wrong Email...!\")\r\n}\r\nelse if (!/^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/.test(values.email)) {\r\n  error.email = toast.error(\"Invalid Email Address\");\r\n}\r\nreturn error\r\n  }\r\n\r\n  /**valida */"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}